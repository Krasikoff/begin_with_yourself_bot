"""First migration

Revision ID: 9ef75af6420b
Revises: 
Create Date: 2024-09-08 12:42:56.359435

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from fastapi_storages import FileSystemStorage
from fastapi_storages.integrations.sqlalchemy import FileType
from sqlalchemy_utils.types.choice import ChoiceType
from app.core.constants import ACTIVITY_PURPOSE, WORKOUT_TYPE, GENDER, PHYSICAL_ACTIVITY
from app.core.config import UPLOAD_DIR, STATIC_DIR


# revision identifiers, used by Alembic.
revision: str = '9ef75af6420b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'advertisement',
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('text', sa.String(length=1024), nullable=True),
        sa.Column('image', FileType(storage=FileSystemStorage(path=STATIC_DIR)), nullable=True),
        sa.Column('hour_to_adv', sa.Integer(), nullable=False),
        sa.Column('active', sa.Boolean(), nullable=True),
        sa.Column('gender', ChoiceType(GENDER), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.CheckConstraint('(8<hour_to_adv) and (hour_to_adv<21)', name='check_min_max_hour'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('hour_to_adv', 'active', name='unique_hour_and_active'),
        sa.UniqueConstraint('name')
    )
    op.create_table(
        'calorie',
        sa.Column('gender', ChoiceType(GENDER), nullable=True),
        sa.Column('purpose', ChoiceType(ACTIVITY_PURPOSE), nullable=True),
        sa.Column('activity', ChoiceType(PHYSICAL_ACTIVITY), nullable=True),
        sa.Column('picture', FileType(storage=FileSystemStorage(path=STATIC_DIR)), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'exercise',
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('video', FileType(storage = FileSystemStorage(path=UPLOAD_DIR)), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table(
        'user',
        sa.Column('telegram_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('gender', ChoiceType(GENDER), nullable=True),     
        sa.Column('age', sa.Integer(), nullable=False),
        sa.Column('weight', sa.Integer(), nullable=False),
        sa.Column('height', sa.Integer(), nullable=False),
        sa.Column('purpose', ChoiceType(ACTIVITY_PURPOSE), nullable=True),
        sa.Column('activity', ChoiceType(PHYSICAL_ACTIVITY), nullable=True),
        sa.Column('location', sa.String(length=128), nullable=True),
        sa.Column('email', sa.String(length=320), nullable=False),
        sa.Column('hashed_password', sa.String(length=1024), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('is_superuser', sa.Boolean(), nullable=False),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.Column('id', sa.Integer(), nullable=False),
#        sa.CheckConstraint('age between (14, 56)'),
#        sa.CheckConstraint('height between (100, 250)'),
#        sa.CheckConstraint('weight between (20, 500)'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('telegram_id')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)

    op.create_table('workout',
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('group', ChoiceType(WORKOUT_TYPE), nullable=True),
        sa.Column('gender', ChoiceType(GENDER), nullable=True),        
        sa.Column('purpose', ChoiceType(ACTIVITY_PURPOSE), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table('schedule',
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('start_course', sa.DateTime(), nullable=True),
        sa.Column('stop_reminder_train', sa.Boolean(), nullable=True),
        sa.Column('stop_reminder_sleep', sa.Boolean(), nullable=True),
        sa.Column('stop_reminder_calories', sa.Boolean(), nullable=True),
        sa.Column('stop_reminder_adv', sa.Boolean(), nullable=True),
        sa.Column('utc_offset', sa.Integer(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sleep',
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('go_to_bed_time', sa.DateTime(), nullable=True),
        sa.Column('wake_up_time', sa.DateTime(), nullable=True),
        sa.Column('sleep_duration', sa.Float(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workoutexercise',
        sa.Column('exercise_id', sa.Integer(), nullable=False),
        sa.Column('workout_id', sa.Integer(), nullable=False),
        sa.Column('sequence_number', sa.Integer(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['exercise_id'], ['exercise.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['workout_id'], ['workout.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('workoutexercise')
    op.drop_table('sleep')
    op.drop_table('schedule')
    op.drop_table('workout')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('exercise')
    op.drop_table('calorie')
    op.drop_table('advertisement')
    # ### end Alembic commands ###
